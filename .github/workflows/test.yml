name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv pip install -e .[dev]

    - name: Lint with ruff
      run: |
        uv run ruff check src/kicad_pcb_api/ src/tests/ --select=E9,F63,F7,F82

    - name: Type check with mypy
      run: |
        uv run mypy src/kicad_pcb_api/ --ignore-missing-imports

    - name: Test with pytest
      run: |
        uv run pytest src/tests/ -v --cov=kicad_pcb_api --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        uv pip install -e .

    - name: Integration test - Basic API
      run: |
        uv run python -c "
        import kicad_pcb_api as kpa
        pcb = kpa.create_pcb()
        footprint = pcb.add_footprint('R1', 'Resistor_SMD:R_0603_1608Metric', 50, 50)
        print(f'✅ Integration test passed: {footprint.reference}')
        print(f'✅ Footprints: {len(pcb.footprints)}')
        "

    - name: Integration test - Reference PCBs
      run: |
        # Test parsing reference PCBs if they exist
        if [ -d "reference-pcbs" ]; then
          uv run pytest src/tests/test_reference_pcbs.py -v --tb=short || echo "Reference PCB tests not available"
        else
          echo "No reference PCBs found"
        fi
